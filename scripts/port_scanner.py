import socket
import argparse
from concurrent.futures import ThreadPoolExecutor
import subprocess

def scan_port(host, port, verbose, timeout):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((host, port))
            if result == 0:
                if verbose:
                    print(f"[+] Port {port} is open on {host}")
                return port
            else:
                if verbose:
                    print(f"[-] Port {port} is closed on {host}")
                return None
    except (socket.error, socket.timeout) as e:
        if verbose:
            print(f"[!] Could not connect to {host}:{port} - {e}")
        return None

def scan_ports(host, start_port, end_port, verbose, timeout=1):
    open_ports = []
    with ThreadPoolExecutor(max_workers=100) as executor:
        futures = {executor.submit(scan_port, host, port, verbose, timeout): port for port in range(start_port, end_port + 1)}
        for future in futures:
            result = future.result()
            if result is not None:
                open_ports.append(result)
    return open_ports

def scan_with_nmap(host, start_port, end_port, verbose):
    nmap_output = subprocess.check_output(['nmap', '-sT', '-O', '-sV', '-p', f'{start_port}-{end_port}', host]).decode('utf-8')
    nmap_lines = nmap_output.split('\n')

    ports = []
    os = ''
    device_type = ''
    for line in nmap_lines:
        if 'open' in line:
            port = line.split('/')[0]
            ports.append(port)
        elif 'OS details:' in line:
            os = line.split(':')[1].strip()
        elif 'Device type:' in line:
            device_type = line.split(':')[1].strip()

    if verbose:
        print(f"OS: {os}")
        print(f"Device Type: {device_type}")

    return ports, os, device_type

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Port Scanner")
    parser.add_argument("host", help="Host to scan")
    parser.add_argument("start_port", type=int, help="Starting port")
    parser.add_argument("end_port", type=int, help="Ending port")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
    parser.add_argument("--timeout", type=float, default=1, help="Connection timeout in seconds")
    parser.add_argument("--nmap", action="store_true", help="Use Nmap for scanning")

    args = parser.parse_args()
    print(f"Scanning {args.host} from port {args.start_port} to {args.end_port} with a timeout of {args.timeout} seconds...")

    if args.nmap:
        open_ports, os, device_type = scan_with_nmap(args.host, args.start_port, args.end_port, args.verbose)
    else:
        open_ports = scan_ports(args.host, args.start_port, args.end_port, args.verbose, args.timeout)

    print(f"Open ports: {open_ports}")